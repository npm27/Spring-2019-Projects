jfb.d
print(R.t)[[5]] #T-values
pairwise.t.test(nomiss$Jol, nomiss$Direction, ##significant difference between Unrelated pairs and related pairs
paired = F, p.adjust.method = 'Bonferroni')
pairwise.t.test(nomiss$Jol, nomiss$Direction, ##significant difference between Unrelated pairs and related pairs
paired = F, p.adjust.method = 'bonferroni')
pairwise.t.test(nomiss$Recall, nomiss$Direction, ##all are significant
paired = F, p.adjust.method = 'bonferroni')
Jol.t = pairwise.t.test.with.t.and.df(nomiss$Jol, nomiss$Direction,
paired = F, p.adjust.method = 'bonferroni')
R.t = pairwise.t.test.with.t.and.df(nomiss$Recall, nomiss$Direction,
paired = F, p.adjust.method = 'bonferroni')
print(Jol.t)[[5]] #T-values
print(R.t)[[5]] #T-values
rfs = d.dep.t.avg(67.40741, 58.83929, 46.89169, 49.23445, 1120, a = .05) #d = 0.18
rfs.d = round(rfs$d, digits = 2)
rfs.d
model9 = aov(int.dat$diff ~ (int.dat$jol_bin*int.dat$direction))
nomiss.f = subset(nomiss,
nomiss$Direction == "F")
nomiss.b = subset(nomiss,
nomiss$Direction == "B")
nomiss.s = subset(nomiss,
nomiss$Direction == "S")
nomiss.u = subset(nomiss,
nomiss$Direction == "U")
##get rounded jols
nomiss.f$jol_bin = round(nomiss.f$Jol, -1)
nomiss.b$jol_bin = round(nomiss.b$Jol, -1)
nomiss.s$jol_bin = round(nomiss.s$Jol, -1)
nomiss.u$jol_bin = round(nomiss.u$Jol, -1)
##put data in wide format
##jol
f.jol = cast(nomiss.f, Subject ~ block, mean, value = 'Jol')
f.jol$mean_JOL = apply(f.jol, 1, mean)
f.jol$jol_bin = round(f.jol$mean_JOL, -1)
b.jol = cast(nomiss.b, Subject ~ block, mean, value = 'Jol')
b.jol$mean_JOL = apply(b.jol, 1, mean)
b.jol$jol_bin = round(b.jol$mean_JOL, -1)
s.jol = cast(nomiss.s, Subject ~ block, mean, value = 'Jol')
s.jol$mean_JOL = apply(s.jol, 1, mean)
s.jol$jol_bin = round(s.jol$mean_JOL, -1)
u.jol = cast(nomiss.u, Subject ~ block, mean, value = 'Jol')
u.jol$mean_JOL = apply(u.jol, 1, mean)
u.jol$jol_bin = round(u.jol$mean_JOL, -1)
##recall
f.recall = cast(nomiss.f, Subject ~ block, mean, value = 'Recall')
f.recall$mean_recall = apply(f.recall, 1, mean)
b.recall = cast(nomiss.b, Subject ~ block, mean, value = 'Recall')
b.recall$mean_recall = apply(b.recall, 1, mean)
s.recall = cast(nomiss.s, Subject ~ block, mean, value = 'Recall')
s.recall$mean_recall = apply(s.recall, 1, mean)
u.recall = cast(nomiss.u, Subject ~ block, mean, value = 'Recall')
u.recall$mean_recall = apply(u.recall, 1, mean)
##add direction column
f.recall$direction = rep("f", 28)
f.jol$direction = rep("f", 28)
b.recall$direction = rep("b", 28)
b.jol$direction = rep("b", 28)
s.recall$direction = rep("s", 28)
s.jol$direction = rep("s", 28)
u.recall$direction = rep("u", 28)
u.jol$direction = rep("u", 28)
##Put everything back together
int.recall = rbind(f.recall, b.recall, s.recall, u.recall)
int.jol = rbind(f.jol, b.jol, s.jol, u.jol)
int.recall = int.recall[ , -c(2:3)]
int.jol = int.jol[ , -c(2:3)]
int.dat = cbind(int.jol, int.recall)
int.dat = int.dat[ , -c(4:5)]
##get difference score
int.dat$mean_recall = int.dat$mean_recall * 100
int.dat$diff = int.dat$jol_bin - int.dat$mean_recall
library(car)
model9 = aov(int.dat$diff ~ (int.dat$jol_bin*int.dat$direction))
summary(model9)
library(lsr)
etas1 = etaSquared(model9)
bar3 = ggplot(long.dat, aes(Direction, Score, fill = Task))
bar3 = bar3 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol" = "white",
"Recall" = "dimgrey")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance")
ylim(0,100)
#labs(title="All Blocks")
bar3
dat = read.csv("ex2 final output.csv")
summary(dat)
library(ggplot2)
library(reshape)
##put recall on correct scale
dat$Scored_Response = (dat$Scored_Response * 100)
##remove out of range scores
dat$Jol_Response[dat$Jol_Response > 100] = NA
##get sample size
summary(dat$Subject) #n = 34
summary(dat)
##remove missing
nomiss3 = na.omit(dat)
colnames(nomiss3)[6] = "Jol"
colnames(nomiss3)[9] = "Recall"
####make the graph####
##melt the data
long.dat = melt(nomiss3, id = c("Subject", "Block",
"ListNum", "Direction", "ExperimentName", "cue_target",
"recall_response", "cue_prompt"))
summary(long.dat)
colnames(long.dat)[9] = "Task"
colnames(long.dat)[10] = "Score"
bar3 = ggplot(long.dat, aes(Direction, Score, fill = Task))
bar3 = bar3 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol" = "white",
"Recall" = "dimgrey")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance")
ylim(0,100)
#labs(title="All Blocks")
bar3
bar3 = ggplot(long.dat, aes(Direction, Score, fill = Task))
bar3 = bar3 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol" = "white",
"Recall" = "dimgrey")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance") +
ylim(0,100)
#labs(title="All Blocks")
bar3
knitr::include_graphics("plot1.png")
citr:::insert_citation()
12.11*40
484.4*2
968.8*.15
968.8-145.32
823-110-50
85-22)
85-22
n = 100
dbinom(100)
dbinom(50, 100, 50)
dbinom(50, 100, 2)
dbinom(50, 100, .5)
dbinom(50, 100, .5)
round(data.frame(0:100, probs), digits = 5)
probs = dbinom(50, 100, .5)
round(data.frame(0:100, probs), digits = 5)
plot(0:100, probs, type="h", xlim=c(0,100), ylim=c(0,.1))
probs = dbinom(0:100, 100, .5) ##get the probability
round(data.frame(0:100, probs), digits = 5)
plot(0:100, probs, type="h", xlim=c(0,100), ylim=c(0,.1))
points(0:100, probs, pch=16, cex=.5)
curve(dnorm(x, mean=50, sd=5), from=0, to=100, xlim = c(0, 100), ylim = c(0, 0.5), xlab = "x", add=T, col="blue")
sum(dbinom(45:55, size=100, prob=1/2))
sum(dbinom(50, size=100, prob=1/2))
length(probs)
probs = as.data.frame(probs)
subset(probs, Mod(probs$probs) == 0)
View(probs)
head = 1
tail = 0
prob = e
e
e = exp(1)
sample(c("Heads", "Tails"), n, rep = T)
Flip1Coin = function(n) sample(c("Heads", "Tails"), n, rep = T)
Flip1Coin(n)
sample(c("Heads", "Tails"), n, rep = T)
sample(c("Heads", "Tails"), n, rep = 100)
Flip1Coin = function(n) sample(c("Heads", "Tails"), n, rep = 100)
Flip1Coin(n)
sample(c("Heads", "Tails"), n, rep = 100)
Flip1Coin = sample(c("Heads", "Tails"), n, rep = 100)
pbinom(50, 100, .5)
dbinom(50, 100, .5)
dnorm(50)
dnorm(50/sqrt(24))
pbinom(50, size = 100, .5)
pbinom(48, size = 100, .5)
pbinom(52, size = 100, .5)
pbinom(71, size = 100, .5)
m = 100 * .5
sd1 = sqrt(100 * .5 *.5)
1 - dnorm(50, mean = m, sd = sd1)
1 - pnorm(50, mean = m, sd = sd1)
x = c(0:100)
length(x)
mod(x, 2)
Mod(x)
Mod(x, 2)
54+55+66+63+64+60+72+77
511/8
setwd("~/GitHub/Spring-2019-Projects/CVOE/6 Distributional Analyses")
##setup
library(tidyverse)
data = read.csv("Final_CVOE_Trimmed 9_22.csv")
colnames(data)[2] = "subject"
colnames(data)[12] = "rt"
#data$condition = rep("pure")
##subset into pure, switch, and non-switch subsets
pure = subset(data,
data$block_type == "cv" | data$TASK == "oe")
switch.trial = subset(data,
data$Switch == "Y")
non_switch.trial = subset(data,
data$Switch == "N")
##add condition column
pure$condition = rep("pure")
switch.trial$condition = rep("switch")
non_switch.trial$condition = rep("non-switch")
##put it all back together
combined = rbind(pure, switch.trial, non_switch.trial)
#quantiles
data2 <- combined %>% group_by(subject,condition) %>% summarize(one = quantile(rt, probs = .1),two = quantile(rt, probs = .3),three = quantile(rt, probs = .5),four = quantile(rt, probs = .7), five = quantile(rt, probs = .9))
# vincentiles
num_vins = 6 # how many vincentiles do you want
data3 <- combined %>% group_by(subject,condition) %>% mutate(bin = ntile(rt,  num_vins)) %>% group_by(subject,condition,bin) %>% summarize(mean = mean(rt))
View(data3)
##write data
write.csv(data3, file = "ya_vinc.csv", row.names = FALSE)
data = read.csv("Older_CVOE_Trimmed 10_12.csv")
colnames(data)[2] = "subject"
colnames(data)[12] = "rt"
##subset into pure, switch, and non-switch subsets
pure = subset(data,
data$block_type == "cv" | data$TASK == "oe")
switch.trial = subset(data,
data$Switch == "Y")
non_switch.trial = subset(data,
data$Switch == "N")
##add condition column
pure$condition = rep("pure")
switch.trial$condition = rep("switch")
non_switch.trial$condition = rep("non-switch")
##put it all back together
combined = rbind(pure, switch.trial, non_switch.trial)
#quantiles
data2 <- combined %>% group_by(subject,condition) %>% summarize(one = quantile(rt, probs = .1),two = quantile(rt, probs = .3),three = quantile(rt, probs = .5),four = quantile(rt, probs = .7), five = quantile(rt, probs = .9))
num_vins = 6 # how many vincentiles do you want
data3 <- combined %>% group_by(subject,condition) %>% mutate(bin = ntile(rt,  num_vins)) %>% group_by(subject,condition,bin) %>% summarize(mean = mean(rt))
View(data3)
#split by healhty and mci
data3.healthy = subset(data3,
data3$subject < 2000)
View(data3.healthy)
data3.mci = subset(data3,
data3$subject >= 2000)
View(data3.mci)
#write data
write.csv(data3.healthy, file = "healthy_vinc.csv", row.names = FALSE)
write.csv(data3.mci, file = "mci_vinc.csv", row.names = FALSE)
####reshape vincentile stuff####
##load data
ya = read.csv("ya_vinc.csv")
healthy = read.csv("healthy_vinc.csv")
mci = read.csv("mci_vinc.csv")
library(reshape)
View(ya)
#split on trial type
ya_pure = subset(ya,
ya$condition == "pure")
ya_switch = subset(ya,
ya$condition == "switch")
ya_non_switch = subset(ya,
ya$condition == "non-switch")
healthy_pure = subset(healthy,
healthy$condition == "pure")
healthy_switch = subset(healthy,
healthy$condition == "switch")
healthy_non_switch = subset(healthy,
healthy$condition == "non-switch")
mci_pure = subset(mci,
mci$condition == "pure")
mci_switch = subset(mci,
mci$condition == "switch")
mci_non_switch = subset(mci,
mci$condition == "non-switch")
View(ya_pure)
colnames(ya)[4] = "average"
colnames(healthy)[4] = "average"
colnames(mci)[4] = "average"
####reshape vincentile stuff####
##load data
ya = read.csv("ya_vinc.csv")
healthy = read.csv("healthy_vinc.csv")
mci = read.csv("mci_vinc.csv")
colnames(ya)[4] = "average"
colnames(healthy)[4] = "average"
colnames(mci)[4] = "average"
library(reshape)
#split on trial type
#younger adults
ya_pure = subset(ya,
ya$condition == "pure")
ya_switch = subset(ya,
ya$condition == "switch")
ya_non_switch = subset(ya,
ya$condition == "non-switch")
#healthy older
healthy_pure = subset(healthy,
healthy$condition == "pure")
healthy_switch = subset(healthy,
healthy$condition == "switch")
healthy_non_switch = subset(healthy,
healthy$condition == "non-switch")
#Mci older
mci_pure = subset(mci,
mci$condition == "pure")
mci_switch = subset(mci,
mci$condition == "switch")
mci_non_switch = subset(mci,
mci$condition == "non-switch")
#reshape things
test = cast(ya_switch, condition~average, mean)
#reshape things
test = cast(ya_pure, condition ~ average)
#reshape things
test = cast(ya_pure, subject ~ average)
#reshape things
test = cast(ya_pure, ya_pure$subject ~ ya_pure$average)
#reshape things
test = cast(ya_pure, subject ~ average)
#reshape things
test = cast(ya_pure, bin ~ average)
#reshape things
test = cast(ya_pure, bin ~ average, mean)
#reshape things
tapply(ya_pure$average,
ya_pure$bin, mean)
#reshape things
tap1 = tapply(ya_pure$average,
ya_pure$bin, mean)
tap1 = as.data.frame(tap1)
View(tap1)
View(tap1)
tap$bin = rep(1:)
tap$bin = rep(1:6)
tap1$bin = rep(1:6)
colnames(tap1)[1] = "pure"
colnames(tap1)[1] = "ya_pure"
tap2 = tapply(ya_switch$average,
ya_switch$bin, mean)
tap2 = as.data.frame(tap2)
tap2$bin = rep(1:6)
colnames(tap2)[1] = "ya_switch"
View(tap2)
#non switch
tap3 = tapply(ya_non_switch$average,
ya_switch$bin, mean)
#non switch
tap3 = tapply(ya_non_switch$average,
ya_non_switch$bin, mean)
tap3 = tapply(ya_non_switch$average,
ya_non_switch$bin, mean)
tap3 = as.data.frame(tap3)
tap2$bin = rep(1:6)
colnames(tap3)[1] = "ya_non_switch"
View(tap3)
#healthy
#pure
tap4 = tapply(healthy_pure$average,
healthy_pure$bin, mean)
tap4 = as.data.frame(tap4)
tap4$bin = rep(1:6)
colnames(tap4)[1] = "healthy_pure"
#switch
tap5 = tapply(healthy_switch$average,
healthy_switch$bin, mean)
tap5 = as.data.frame(tap5)
tap5$bin = rep(1:6)
colnames(tap5)[1] = "healthy_switch"
#non switch
tap6 = tapply(healthy_non_switch$average,
healthy_non_switch$bin, mean)
tap6 = as.data.frame(tap6)
tap6$bin = rep(1:6)
colnames(tap6)[1] = "healthy_non_switch"
####reshape vincentile stuff####
##load data
ya = read.csv("ya_vinc.csv")
healthy = read.csv("healthy_vinc.csv")
mci = read.csv("mci_vinc.csv")
colnames(ya)[4] = "average"
colnames(healthy)[4] = "average"
colnames(mci)[4] = "average"
library(reshape)
#split on trial type
#younger adults
ya_pure = subset(ya,
ya$condition == "pure")
ya_switch = subset(ya,
ya$condition == "switch")
ya_non_switch = subset(ya,
ya$condition == "non-switch")
#healthy older
healthy_pure = subset(healthy,
healthy$condition == "pure")
healthy_switch = subset(healthy,
healthy$condition == "switch")
healthy_non_switch = subset(healthy,
healthy$condition == "non-switch")
#Mci older
mci_pure = subset(mci,
mci$condition == "pure")
mci_switch = subset(mci,
mci$condition == "switch")
mci_non_switch = subset(mci,
mci$condition == "non-switch")
#reshape things
#ya
#pure
tap1 = tapply(ya_pure$average,
ya_pure$bin, mean)
tap1 = as.data.frame(tap1)
tap1$bin = rep(1:6)
colnames(tap1)[1] = "ya_pure"
#switch
tap2 = tapply(ya_switch$average,
ya_switch$bin, mean)
tap2 = as.data.frame(tap2)
tap2$bin = rep(1:6)
colnames(tap2)[1] = "ya_switch"
#non switch
tap3 = tapply(ya_non_switch$average,
ya_non_switch$bin, mean)
tap3 = as.data.frame(tap3)
tap3$bin = rep(1:6)
colnames(tap3)[1] = "ya_non_switch"
#healthy
#pure
tap4 = tapply(healthy_pure$average,
healthy_pure$bin, mean)
tap4 = as.data.frame(tap4)
tap4$bin = rep(1:6)
colnames(tap4)[1] = "healthy_pure"
#switch
tap5 = tapply(healthy_switch$average,
healthy_switch$bin, mean)
tap5 = as.data.frame(tap5)
tap5$bin = rep(1:6)
colnames(tap5)[1] = "healthy_switch"
#non switch
tap6 = tapply(healthy_non_switch$average,
healthy_non_switch$bin, mean)
tap6 = as.data.frame(tap6)
tap6$bin = rep(1:6)
colnames(tap6)[1] = "healthy_non_switch"
#mci
#pure
tap7 = tapply(mci_pure$average,
mci_pure$bin, mean)
tap7 = as.data.frame(tap7)
tap7$bin = rep(1:6)
colnames(tap7)[1] = "mci_pure"
#switch
tap8 = tapply(mci_switch$average,
mci_switch$bin, mean)
tap8 = as.data.frame(tap8)
tap8$bin = rep(1:6)
colnames(tap8)[1] = "mci_switch"
#non switch
tap9 = tapply(mci_non_switch$average,
mci_non_switch$bin, mean)
tap9 = as.data.frame(tap9)
tap9$bin = rep(1:6)
colnames(tap9)[1] = "mci_non_switch"
View(tap9)
#put things back together
combined_pure = cbind(tap1, tap4, tap7)
combined_switch = cbind(tap2, tap5, tap8)
combined_non_switch = cbind(tap3, tap6, tap9)
View(combined_non_switch)
#drop duplicate columns
combined_pure = combined_pure[ , -c(2, 4)]
View(combined_pure)
combined_switch = combined_switch[ , -c(2, 4)]
combined_non_switch = combined_non_switch[ , -c(2, 4)]
write.csv(combined_pure, file = "pure_final.csv", row.names = FALSE)
write.csv(combined_switch, file = "switch_final.csv", row.names = FALSE)
write.csv(combined_non_switch, file = "non_switch_final.csv", row.names = FALSE)
