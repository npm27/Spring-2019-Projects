m2 = tapply(yes.switch$score2,
list(yes.switch$block_type, yes.switch$Subject), mean)
switch_alt_run_m = list(m2[1, ])
switch_shuff_m = list(m2[4, ])
rt2 = tapply(yes.switch.rt$RT,
list(yes.switch.rt$block_type, yes.switch.rt$Subject), mean)
switch_alt_run_rt = list(rt2[1, ])
switch_shuff_rt = list(rt2[4, ])
z_rt2 = tapply(yes.switch.rt$zRT,
list(yes.switch.rt$block_type, yes.switch.rt$Subject), mean)
z_switch_alt_run_rt = list(z_rt2[1, ])
z_switch_shuff_rt = list(z_rt2[4, ])
##non-switch
m3 = tapply(no.switch$score2,
list(no.switch$block_type, no.switch$Subject), mean)
no_switch_alt_run_m = list(m3[1, ])
no_switch_shuff_m = list(m3[4, ])
rt3 = tapply(no.switch.rt$RT,
list(no.switch.rt$block_type, no.switch.rt$Subject), mean)
no_switch_alt_run_rt = list(rt3[1, ])
no_switch_shuff_rt = list(rt3[4, ])
z_rt3 = tapply(no.switch.rt$zRT,
list(no.switch.rt$block_type, no.switch.rt$Subject), mean)
z_no_switch_alt_run_rt = list(z_rt3[1, ])
z_no_switch_shuff_rt = list(z_rt3[4, ])
####put all the output into a dataframe
subID = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16)
output = data.frame(subID, pure_cv_m, pure_cv_rt, pure_oe_m, pure_oe_rt, alt_run_m, alt_run_rt,
shuff_m, shuff_rt, switch_alt_run_m, switch_alt_run_rt, switch_shuff_m,
switch_shuff_rt, no_switch_alt_run_m, no_switch_alt_run_rt,
no_switch_shuff_m, no_switch_shuff_rt)
pure_cv_m = list(m1[2, ])
m1 = tapply(combined$score2,
list(combined$block_type, combined$Subject), mean)
yes.switch.rt = subset(rt_output,
rt_output$Switch == "Y")
no.switch.rt = subset(rt_output,
rt_output$Switch == "N")
m1 = tapply(dat$score2,
list(dat$block_type, dat$Subject), mean)
pure_cv_m = list(m1[2, ])
pure_oe_m = list(m1[3, ])
alt_run_m = list(m1[1, ])
shuff_m = list(m1[4, ])
rt1 = tapply(rt_output$RT,
list(rt_output$block_type, rt_output$Subject), mean)
pure_cv_rt = list(rt1[2, ])
pure_oe_rt = list(rt1[3, ])
alt_run_rt = list(rt1[1, ])
shuff_rt = list(rt1[4, ])
z_rt1 = tapply(rt_output$zRT,
list(rt_output$block_type, rt_output$Subject), mean)
pure_cv_z_rt = list(z_rt1[2, ])
pure_oe_z_rt = list(z_rt1[3, ])
alt_run_z_rt = list(z_rt1[1, ])
shuff_z_rt = list(z_rt1[4, ])
m2 = tapply(yes.switch$score2,
list(yes.switch$block_type, yes.switch$Subject), mean)
switch_alt_run_m = list(m2[1, ])
switch_shuff_m = list(m2[4, ])
yes.switch = subset(dat,
dat$Switch == "Y")
no.switch = subset(dat,
dat$Switch == "N")
##overall
m1 = tapply(dat$score2,
list(dat$block_type, dat$Subject), mean)
pure_cv_m = list(m1[2, ])
pure_oe_m = list(m1[3, ])
alt_run_m = list(m1[1, ])
shuff_m = list(m1[4, ])
rt1 = tapply(rt_output$RT,
list(rt_output$block_type, rt_output$Subject), mean)
pure_cv_rt = list(rt1[2, ])
pure_oe_rt = list(rt1[3, ])
alt_run_rt = list(rt1[1, ])
shuff_rt = list(rt1[4, ])
z_rt1 = tapply(rt_output$zRT,
list(rt_output$block_type, rt_output$Subject), mean)
pure_cv_z_rt = list(z_rt1[2, ])
pure_oe_z_rt = list(z_rt1[3, ])
alt_run_z_rt = list(z_rt1[1, ])
shuff_z_rt = list(z_rt1[4, ])
##Switch
m2 = tapply(yes.switch$score2,
list(yes.switch$block_type, yes.switch$Subject), mean)
switch_alt_run_m = list(m2[1, ])
switch_shuff_m = list(m2[4, ])
rt2 = tapply(yes.switch.rt$RT,
list(yes.switch.rt$block_type, yes.switch.rt$Subject), mean)
switch_alt_run_rt = list(rt2[1, ])
switch_shuff_rt = list(rt2[4, ])
z_rt2 = tapply(yes.switch.rt$zRT,
list(yes.switch.rt$block_type, yes.switch.rt$Subject), mean)
z_switch_alt_run_rt = list(z_rt2[1, ])
z_switch_shuff_rt = list(z_rt2[4, ])
##non-switch
m3 = tapply(no.switch$score2,
list(no.switch$block_type, no.switch$Subject), mean)
no_switch_alt_run_m = list(m3[1, ])
no_switch_shuff_m = list(m3[4, ])
rt3 = tapply(no.switch.rt$RT,
list(no.switch.rt$block_type, no.switch.rt$Subject), mean)
no_switch_alt_run_rt = list(rt3[1, ])
no_switch_shuff_rt = list(rt3[4, ])
z_rt3 = tapply(no.switch.rt$zRT,
list(no.switch.rt$block_type, no.switch.rt$Subject), mean)
z_no_switch_alt_run_rt = list(z_rt3[1, ])
z_no_switch_shuff_rt = list(z_rt3[4, ])
####put all the output into a dataframe
subID = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16)
output = data.frame(subID, pure_cv_m, pure_cv_rt, pure_oe_m, pure_oe_rt, alt_run_m, alt_run_rt,
shuff_m, shuff_rt, switch_alt_run_m, switch_alt_run_rt, switch_shuff_m,
switch_shuff_rt, no_switch_alt_run_m, no_switch_alt_run_rt,
no_switch_shuff_m, no_switch_shuff_rt, pure_cv_z_rt, pure_oe_z_rt,
alt_run_z_rt, shuff_z_rt, z_switch_alt_run_rt, z_switch_shuff_rt,
z_no_switch_alt_run_rt, z_no_switch_shuff_rt)
colnames(output)[2:25] = c("pure_cv_m", "pure_cv_rt", "pure_oe_m", "pure_oe_rt", "altrun_m", "altrun_rt",
"shuff_m", "shuff_rt", "switch_altrun_m", "switch_altrun_rt", "switch_shuff_m",
"switch_shuff_rt", "no_switch_altrun_m", "no_switch_altrun_rt",
"no_switch_shuff_m", "no_switch_shuff_rt", "Z_cv_rt", "Z_oe_rt", "z_alt_run_rt",
"z_shuff_rt", "z_switch_altrun_rt", "z_switch_shuff_rt", "z_no_switch_altrun_rt",
"z_no_switch_shuff_rt")
View(output)
write.csv(output, file = "CVOE_Means_updated_z.csv", row.names = FALSE)
devtools::install_github("npm27/domo")
setwd("~/R/Practice")
dat = read.csv("c10 assignment.csv")
View(dat)
library(ez)
summary(dat)
dat$partno = 1:nrow(dat)
ezANOVA(data = dat,
dv = competence,
between = participant_type,
wid = partno,
type = 3,
detailed = T)
options(scipen = 999)
ezANOVA(data = dat,
dv = competence,
between = participant_type,
wid = partno,
type = 3,
detailed = T)
pairwise.t.test(dat$competence
dat$participant_type,
p.adjust.method = "bonferroni",
paired = F,
var.equal = T)
pairwise.t.test(dat$competence.
dat$participant_type,
p.adjust.method = "bonferroni",
paired = F,
var.equal = T)
pairwise.t.test(dat$competence,
dat$participant_type,
p.adjust.method = "bonferroni",
paired = F,
var.equal = T)
tapply(dat$competence,
dat$participant_type, mean)
source("cleanup.R")
library(ggplot2)
table(dat$participant_type)
pickle_rick +
stat_summary(fun.y = mean,
geom = "bar",
fill = "green",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Type of participant") +
ylab("Competence Level") +
scale_x_discrete(labels = c("novice", "intermediate", "advanced", "postgraduate", "therapist"))
pickle_rick = ggplot(dat, aes(participant_type, competence))
pickle_rick +
stat_summary(fun.y = mean,
geom = "bar",
fill = "green",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Type of participant") +
ylab("Competence Level") +
scale_x_discrete(labels = c("novice", "intermediate", "advanced", "postgraduate", "therapist"))
source("cleanup.R")
pickle_rick = ggplot(dat, aes(participant_type, competence))
pickle_rick +
stat_summary(fun.y = mean,
geom = "bar",
fill = "green",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Type of participant") +
ylab("Competence Level") +
scale_x_discrete(labels = c("novice", "intermediate", "advanced", "postgraduate", "therapist"))
library(Hmisc)
pickle_rick +
stat_summary(fun.y = mean,
geom = "bar",
fill = "green",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Type of participant") +
ylab("Competence Level") +
scale_x_discrete(labels = c("novice", "intermediate", "advanced", "postgraduate", "therapist"))
pickle_rick = ggplot(dat, aes(participant_type, competence))
pickle_rick +
stat_summary(fun.y = mean,
geom = "bar",
fill = "green",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Type of participant") +
ylab("Competence Level") +
scale_x_discrete(labels = c("novice", "intermediate", "advanced", "postgraduate", "therapist"))
pickle_rick = ggplot(dat, aes(participant_type, competence))
pickle_rick +
stat_summary(fun.y = mean,
geom = "bar",
fill = "green",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Type of participant") +
ylab("Competence Level") +
scale_x_discrete(labels = c("novice", "intermediate", "advanced", "postgraduate", "therapist"))
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
pickle_rick = ggplot(dat, aes(participant_type, competence))
pickle_rick +
stat_summary(fun.y = mean,
geom = "bar",
fill = "green",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Type of participant") +
ylab("Competence Level") +
scale_x_discrete(labels = c("novice", "intermediate", "advanced", "postgraduate", "therapist"))
dat$var1 = rnorm(100)
lm(var1 ~ competence, data = dat)
model1 = lm(var1 ~ competence, data = dat)
summary(model1)
dat$var2 = runif(100, 250, 500)
dat$var2 = round(dat$var2, 0)
model2 = lm(var1 ~ competence + var2, data = dat)
summary(model2)
model3 = lm(var1 ~ competence * var2, data = dat)
summary(model3)
dat2 = read.csv("r practice.csv")
View(dat2)
dat2 = read.csv("c5 assignment.csv")
View(dat2)
library(domo)
describe(dat2)
describe(dat2)
describe(dat2$Midterm)
summary(dat2)
dat2$midterm_imputed = impute.m(dat2$Midterm)
dat2$midterm_imputed = impute_m(dat2$Midterm)
63000/1500
7200 + ((10.84*40) * 52)
setwd("~/GitHub/domo")
library(domo)
describe(dat2)
describe(dat2, dat2$Exam_1)
describe(dat2, Exam_1)
describe.normality(dat2, Exam_1)
setwd("~/GitHub/Spring-2019-Projects/Direction JOL/Output/Merged")
##set up
dat = read.csv("ex2 final output.csv")
library(ggplot2)
library(reshape)
##put recall on correct scale
dat$Scored_Response = (dat$Scored_Response * 100)
##remove out of range scores
dat$Jol_Response[dat$Jol_Response > 100] = NA
##get sample size
summary(dat$Subject) #n = 27
summary(dat)
##remove missing
nomissing = na.omit(dat)
##get descriptives
tapply(nomissing$Jol_Response,
nomissing$Direction, mean)
tapply(nomissing$Jol_Response,
nomissing$Direction, sd)
tapply(nomissing$Scored_Response,
nomissing$Direction, mean)
tapply(nomissing$Scored_Response,
nomissing$Direction, sd)
####make the graph####
##melt the data
long.dat = melt(nomissing, id = c("Subject", "Block",
"ListNum", "Direction", "ExperimentName", "cue_target",
"recall_response", "cue_prompt"))
summary(long.dat)
colnames(long.dat)[9] = "Task"
colnames(long.dat)[10] = "Score"
cleanup = theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "white"),
text = element_text(size = 15))
bar1 = ggplot(long.dat, aes(Direction, Score, fill = Task))
bar1 = bar1 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol_Response" = "indianred4",
"Scored_Response" = "dimgray")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance") +
ylim(0,100) +
labs(title="All Blocks")
bar1
bar1 = bar1 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol_Response" = "white",
"Scored_Response" = "dimgray")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance") +
ylim(0,100) +
labs(title="All Blocks")
bar1
bar1 = bar1 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol_Response" = "white",
"Scored_Response" = "dimgray")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance") +
ylim(0,100) +
#labs(title="All Blocks")
bar1
bar1 = bar1 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol_Response" = "white",
"Scored_Response" = "dimgray")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance") +
ylim(0,100)
bar1
bar1 = ggplot(long.dat, aes(Direction, Score, fill = Task))
bar1 = bar1 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol_Response" = "white",
"Scored_Response" = "dimgray")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance") +
ylim(0,100)
bar1
tapply(nomissing$Scored_Response,
nomissing$Direction)
tapply(nomissing$Scored_Response,
nomissing$Direction, mean)
tapply(nomissing$Scored_Response,
nomissing$Direction, sd)
tapply(nomissing$Jol_Response,
nomissing$Direction, mean)
tapply(nomissing$Jol_Response,
nomissing$Direction, sd)
library(EZ)
library(ez)
View(nomissing)
ezANOVA(data = nomissing,
wid = Subject,
within = Direction,
dv = Scored_Response,
type = 3)
ezANOVA(data = nomissing,
wid = Subject,
within = Direction,
dv = Jol_Response,
type = 3)
pairwise.t.test(nomissing$Scored_Response, nomissing$Direction,
paired = F)
pairwise.t.test(nomissing$Jol_Response, nomissing$Direction,
paired = F)
library(MOTE)
tapply(nomissing$Scored_Response,
nomissing$Direction, mean)
tapply(nomissing$Scored_Response,
nomissing$Direction, mean)
tapply(nomissing$Jol_Response,
nomissing$Direction, mean)
tapply(nomissing$Scored_Response,
nomissing$Direction, sd)
tapply(nomissing$Jol_Response,
nomissing$Direction, sd)
tapply(nomissing$Scored_Response, nomiss$Direction, length)
tapply(nomissing$Scored_Response, nomiss$Direction, length)
tapply(nomissing$Scored_Response, nomissing$Direction, length)
tapply(nomissing$Jol_Response, nomissing$Direction, length)
tapply(dat$Scored_Response, dat$Direction, length)
tapply(nomissing$Scored_Response,
nomissing$Direction, mean)
tapply(nomissing$Scored_Response,
nomissing$Direction, sd)
jfb = d.dep.t.avg(62.24917, 58.27500, 32.40954, 32.93337, 880, a = .05)
jfb.d = round(jfb$d, digits = 2)
round(jfb$d, digits = 2)
jfs = d.dep.t.avg(62.24917, 66.42011, 32.40954, 32.30136, 880, a = .05)
jfs.d = round(jfs$d, digits = 2)
round(jfs$d, digits = 2)
jfu = d.dep.t.avg(62.24917, 22.09742, 32.40954, 24.82979, 880, a = .05)
jfu.d = round(jfu$d, digits = 2)
round(jfu$d, digits = 2)
jbs = d.dep.t.avg(58.27500, 66.42011, 32.93337, 32.30136, 880, a = .05)
jbs.d = round(jbs$d, digits = 2)
round(jbs$d, digits = 2)
jbu = d.dep.t.avg(58.27500, 22.09742, 32.93337, 24.82979, 880, a = .05)
jbu.d = round(jbu$d, digits = 2)
round(jbu$d, digits = 2)
jsu = d.dep.t.avg(66.42011, 22.09742, 32.30136, 24.82979, 880, a = .05)
jsu.d = round(jsu$d, digits = 2)
round(jsu$d, digits = 2)
rfb = d.dep.t.avg(67.55260, 31.47727, 46.84374, 46.46894, 1080, a = .05)
rfb.d = round(rfb$d, digits = 2)
round(rfb$d, digits = 2)
rfs = d.dep.t.avg(67.55260, 60.44693, 46.84374, 48.92378, 880, a = .05)
rfs.d = round(rfs$d, digits = 2)
round(rfs$d, digits = 2)
rfu = d.dep.t.avg(67.55260, 10.92593, 46.84374, 31.21087, 880, a = .05)
rfu.d = round(rfu$d, digits = 2)
round(rfu$d, digits = 2)
rbs = d.dep.t.avg(31.47727, 60.44693, 46.46894, 48.92378, 880, a = .05)
rbs.d = round(rbs$d, digits = 2)
round(rbs$d, digits = 2)
rbu = d.dep.t.avg(31.47727, 12.31803, 46.46894, 32.88282, 880, a = .05)
rbu.d = round(rbu$d, digits = 2)
round(rbu$d, digits = 2)
rsu = d.dep.t.avg(60.44693, 12.31803, 48.92378, 32.88282, 880, a = .05)
rsu.d = round(rsu$d, digits = 2)
round(rsu$d, digits = 2)
pairwise.t.test(nomissing$Jol_Response, nomissing$Direction,
paired = F)
