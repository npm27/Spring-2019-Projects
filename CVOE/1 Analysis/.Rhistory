switch.oe$o_or_e[switch.oe$o_or_e == "1"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "2"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "3"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "4"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "5"] = "e"
table(switch.oe$o_or_e)
##get rid of the NAs (cv)
switch.cv["c_or_v"][is.na(switch.cv["c_or_v"])] = "c"
##make 1, 2, 3, 4, and 5 into V
switch.cv$c_or_v[switch.cv$c_or_v == "1"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "2"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "3"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "4"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "5"] = "v"
table(switch.cv$c_or_v)
##convert o e column to o's and e's
switch.oe$response2 = switch.oe$Response
switch.oe$response2 = as.numeric(switch.oe$response2)
switch.oe$response2 = as.character(switch.oe$response2)
switch.oe$response2[switch.oe$response2 == "1"] = "e"
switch.oe$response2[switch.oe$response2 == "2"] = "o"
##make answer key columns for oe
switch.oe$match2 = switch.oe$response2 == switch.oe$o_or_e
switch.oe$score2 = as.numeric(switch.oe$match2)
##convert p q column to c's and v's
switch.cv$response2 = switch.cv$Response
switch.cv$response2 = as.numeric(switch.cv$response2)
switch.cv$response2 = as.character(switch.cv$response2)
switch.cv$response2[switch.cv$response2 == "1"] = "v"
switch.cv$response2[switch.cv$response2 == "2"] = "c"
##make answer key columns for cv
switch.cv$match2 = switch.cv$response2 == switch.cv$c_or_v
switch.cv$score2 = as.numeric(switch.cv$match2)
####pure trials####
##make letter and number columns
string2 = as.character(pure$STIM)
pure$letter = substr(string2, 0, 1)
pure$number = substr(string2, 4, 4)
##subset based on cv or oe
pure.cv = subset(pure,
pure$CVOE == "CV")
pure.oe = subset(pure,
pure$CVOE == "OE")
##make c or v column for pure.cv
magic_for(print, silent = TRUE)
for (value in pure.cv$letter) {
print(match(value, list.vowel))
}
cv2 = magic_result_as_vector()
pure.cv$c_or_v = cv2
##make o or e column for pure.oe
magic_for(print, silent = TRUE)
for (value in pure.oe$number) {
print(match(value, list.even))
}
oe2 = magic_result_as_vector()
pure.oe$o_or_e = oe2
##get rid of the NAs (oe)
pure.oe["o_or_e"][is.na(pure.oe["o_or_e"])] = "o"
##make 1, 2, 3, 4, and 5 into e
pure.oe$o_or_e[pure.oe$o_or_e == "1"] = "e"
pure.oe$o_or_e[pure.oe$o_or_e == "2"] = "e"
pure.oe$o_or_e[pure.oe$o_or_e == "3"] = "e"
pure.oe$o_or_e[pure.oe$o_or_e == "4"] = "e"
pure.oe$o_or_e[pure.oe$o_or_e == "5"] = "e"
table(pure.oe$o_or_e)
##get rid of the NAs (cv)
pure.cv["c_or_v"][is.na(pure.cv["c_or_v"])] = "c"
##make 1, 2, 3, 4, and 5 into v
pure.cv$c_or_v[pure.cv$c_or_v == "1"] = "v"
pure.cv$c_or_v[pure.cv$c_or_v == "2"] = "v"
pure.cv$c_or_v[pure.cv$c_or_v == "3"] = "v"
pure.cv$c_or_v[pure.cv$c_or_v == "4"] = "v"
pure.cv$c_or_v[pure.cv$c_or_v == "5"] = "v"
table(pure.cv$c_or_v)
##convert p q column to c's and v's
pure.cv$response2 = pure.cv$Response
pure.cv$response2 = as.numeric(pure.cv$response2)
pure.cv$response2 = as.character(pure.cv$response2)
pure.cv$response2[pure.cv$response2 == "1"] = "v"
pure.cv$response2[pure.cv$response2 == "2"] = "c"
##make answer key columns for cv
pure.cv$match2 = pure.cv$response2 == pure.cv$c_or_v
pure.cv$score2 = as.numeric(pure.cv$match2)
##convert p q column to o's and e's
pure.oe$response2 = pure.oe$Response
pure.oe$response2 = as.numeric(pure.oe$response2)
pure.oe$response2 = as.character(pure.oe$response2)
pure.oe$response2[pure.oe$response2 == "1"] = "e"
pure.oe$response2[pure.oe$response2 == "2"] = "o"
##make answer key columns for oe
pure.oe$match2 = pure.oe$response2 == pure.oe$o_or_e
pure.oe$score2 = as.numeric(pure.oe$match2)
####put everything back together####
##match column names
colnames(pure.cv)[16] = "key2"
colnames(pure.oe)[16] = "key2"
colnames(switch.cv)[16] = "key2"
colnames(switch.oe)[16] = "key2"
final = rbind(pure.cv, pure.oe, switch.cv, switch.oe)
#write.csv(final, file = "scored 8_6.csv")
final
View(final)
####put everything back together####
##match column names
colnames(pure.cv)[16] = "key2"
##make answer key columns for cv
pure.cv$match2 = pure.cv$response2 == pure.cv$c_or_v
####create an answer key####
##setup
dat = read.csv("CVOE 9_22.csv")
pure = subset(dat,
dat$block_type == "oe" | dat$block_type == "cv")
switch = subset(dat,
dat$block_type == "alt" | dat$block_type == "shuf")
library(tidyr)
library(magicfor)
for (i in dat$STIM){
num.chars = nchar(i)
}
####switch trials####
string1 = as.character(switch$STIM)
starts = seq(1, num.chars, by = 2)
##make letter and number columns
switch$letter = substr(string1, 0, 1)
switch$number = substr(string1, 4, 4)
##subset based on cv or oe
switch.cv = subset(switch,
switch$CVOE == "CV")
switch.oe = subset(switch,
switch$CVOE == "OE")
##denote whether letter is consonant or vowel
list.vowel = c("A", "E", "I", "O", "U")
list.con = c("D", "J", "H", "P", "S")
##denote whether number is odd or even
list.even = c("0", "2", "4", "6", "8")
list.odd = c("1", "3", "5", "7", "9")
##make c or v column for switch.cv
magic_for(print, silent = TRUE)
for (value in switch.cv$letter) {
print(match(value, list.vowel))
}
cv = magic_result_as_vector()
switch.cv$c_or_v = cv
##make o or e column for switch.oe
for (value in switch.oe$number) {
print(match(value, list.even))
}
oe = magic_result_as_vector()
switch.oe$o_or_e = oe
oe = as.character(oe)
##get rid of the NAs (oe)
switch.oe["o_or_e"][is.na(switch.oe["o_or_e"])] = "o"
##make 1, 2, 3, 4, and 5 into e
switch.oe$o_or_e[switch.oe$o_or_e == "1"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "2"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "3"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "4"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "5"] = "e"
table(switch.oe$o_or_e)
##get rid of the NAs (cv)
switch.cv["c_or_v"][is.na(switch.cv["c_or_v"])] = "c"
##make 1, 2, 3, 4, and 5 into V
switch.cv$c_or_v[switch.cv$c_or_v == "1"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "2"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "3"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "4"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "5"] = "v"
table(switch.cv$c_or_v)
##convert o e column to o's and e's
switch.oe$response2 = switch.oe$Response
switch.oe$response2 = as.numeric(switch.oe$response2)
switch.oe$response2 = as.character(switch.oe$response2)
View(switch.oe)
##convert o e column to o's and e's
switch.oe$response2 = switch.oe$Response
####create an answer key####
##setup
dat = read.csv("CVOE 9_22.csv")
pure = subset(dat,
dat$block_type == "oe" | dat$block_type == "cv")
switch = subset(dat,
dat$block_type == "alt" | dat$block_type == "shuf")
library(tidyr)
library(magicfor)
for (i in dat$STIM){
num.chars = nchar(i)
}
####switch trials####
string1 = as.character(switch$STIM)
starts = seq(1, num.chars, by = 2)
##make letter and number columns
switch$letter = substr(string1, 0, 1)
switch$number = substr(string1, 4, 4)
##subset based on cv or oe
switch.cv = subset(switch,
switch$CVOE == "CV")
switch.oe = subset(switch,
switch$CVOE == "OE")
##denote whether letter is consonant or vowel
list.vowel = c("A", "E", "I", "O", "U")
list.con = c("D", "J", "H", "P", "S")
##denote whether number is odd or even
list.even = c("0", "2", "4", "6", "8")
list.odd = c("1", "3", "5", "7", "9")
##make c or v column for switch.cv
magic_for(print, silent = TRUE)
for (value in switch.cv$letter) {
print(match(value, list.vowel))
}
cv = magic_result_as_vector()
switch.cv$c_or_v = cv
##make o or e column for switch.oe
for (value in switch.oe$number) {
print(match(value, list.even))
}
oe = magic_result_as_vector()
switch.oe$o_or_e = oe
oe = as.character(oe)
##get rid of the NAs (oe)
switch.oe["o_or_e"][is.na(switch.oe["o_or_e"])] = "o"
##make 1, 2, 3, 4, and 5 into e
switch.oe$o_or_e[switch.oe$o_or_e == "1"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "2"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "3"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "4"] = "e"
switch.oe$o_or_e[switch.oe$o_or_e == "5"] = "e"
table(switch.oe$o_or_e)
##get rid of the NAs (cv)
switch.cv["c_or_v"][is.na(switch.cv["c_or_v"])] = "c"
##make 1, 2, 3, 4, and 5 into V
switch.cv$c_or_v[switch.cv$c_or_v == "1"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "2"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "3"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "4"] = "v"
switch.cv$c_or_v[switch.cv$c_or_v == "5"] = "v"
table(switch.cv$c_or_v)
##convert o e column to o's and e's
switch.oe$response2 = switch.oe$Response
switch.oe$response2 = as.numeric(switch.oe$response2)
switch.oe$response2 = as.character(switch.oe$response2)
switch.oe$response2[switch.oe$response2 == "1"] = "e"
switch.oe$response2[switch.oe$response2 == "2"] = "o"
##make answer key columns for oe
switch.oe$match2 = switch.oe$response2 == switch.oe$o_or_e
switch.oe$score2 = as.numeric(switch.oe$match2)
##convert p q column to c's and v's
switch.cv$response2 = switch.cv$Response
switch.cv$response2 = as.numeric(switch.cv$response2)
switch.cv$response2 = as.character(switch.cv$response2)
switch.cv$response2[switch.cv$response2 == "1"] = "v"
switch.cv$response2[switch.cv$response2 == "2"] = "c"
##make answer key columns for cv
switch.cv$match2 = switch.cv$response2 == switch.cv$c_or_v
switch.cv$score2 = as.numeric(switch.cv$match2)
####pure trials####
##make letter and number columns
string2 = as.character(pure$STIM)
pure$letter = substr(string2, 0, 1)
pure$number = substr(string2, 4, 4)
##subset based on cv or oe
pure.cv = subset(pure,
pure$CVOE == "CV")
pure.oe = subset(pure,
pure$CVOE == "OE")
##make c or v column for pure.cv
magic_for(print, silent = TRUE)
for (value in pure.cv$letter) {
print(match(value, list.vowel))
}
cv2 = magic_result_as_vector()
pure.cv$c_or_v = cv2
##make o or e column for pure.oe
magic_for(print, silent = TRUE)
for (value in pure.oe$number) {
print(match(value, list.even))
}
oe2 = magic_result_as_vector()
pure.oe$o_or_e = oe2
##get rid of the NAs (oe)
pure.oe["o_or_e"][is.na(pure.oe["o_or_e"])] = "o"
##make 1, 2, 3, 4, and 5 into e
pure.oe$o_or_e[pure.oe$o_or_e == "1"] = "e"
pure.oe$o_or_e[pure.oe$o_or_e == "2"] = "e"
pure.oe$o_or_e[pure.oe$o_or_e == "3"] = "e"
pure.oe$o_or_e[pure.oe$o_or_e == "4"] = "e"
pure.oe$o_or_e[pure.oe$o_or_e == "5"] = "e"
table(pure.oe$o_or_e)
##get rid of the NAs (cv)
pure.cv["c_or_v"][is.na(pure.cv["c_or_v"])] = "c"
##make 1, 2, 3, 4, and 5 into v
pure.cv$c_or_v[pure.cv$c_or_v == "1"] = "v"
pure.cv$c_or_v[pure.cv$c_or_v == "2"] = "v"
pure.cv$c_or_v[pure.cv$c_or_v == "3"] = "v"
pure.cv$c_or_v[pure.cv$c_or_v == "4"] = "v"
pure.cv$c_or_v[pure.cv$c_or_v == "5"] = "v"
table(pure.cv$c_or_v)
##convert p q column to c's and v's
pure.cv$response2 = pure.cv$Response
pure.cv$response2 = as.numeric(pure.cv$response2)
pure.cv$response2 = as.character(pure.cv$response2)
pure.cv$response2[pure.cv$response2 == "1"] = "v"
pure.cv$response2[pure.cv$response2 == "2"] = "c"
##make answer key columns for cv
pure.cv$match2 = pure.cv$response2 == pure.cv$c_or_v
pure.cv$score2 = as.numeric(pure.cv$match2)
##convert p q column to o's and e's
pure.oe$response2 = pure.oe$Response
pure.oe$response2 = as.numeric(pure.oe$response2)
pure.oe$response2 = as.character(pure.oe$response2)
pure.oe$response2[pure.oe$response2 == "1"] = "e"
pure.oe$response2[pure.oe$response2 == "2"] = "o"
##make answer key columns for oe
pure.oe$match2 = pure.oe$response2 == pure.oe$o_or_e
pure.oe$score2 = as.numeric(pure.oe$match2)
####put everything back together####
##match column names
colnames(pure.cv)[16] = "key2"
colnames(pure.oe)[16] = "key2"
colnames(switch.cv)[16] = "key2"
colnames(switch.oe)[16] = "key2"
final = rbind(pure.cv, pure.oe, switch.cv, switch.oe)
#write.csv(final, file = "scored 8_6.csv")
write.csv(final, file = "scored 9_22.csv")
setwd("~/GitHub/Spring-2019-Projects/CVOE/1 Analysis")
dat = read.csv("corrected pre-trimmed.csv")
dat$zRT = scale(dat$RT, center = TRUE, scale = TRUE)
dat.trimmed = subset(dat,
dat$zRT < 3)
dat.trimmed2 = subset(dat.trimmed,
dat.trimmed$zRT > -3)
##what percent of the data is this?
removed = nrow(dat) - nrow(dat.trimmed2)
p = removed / nrow(dat)
p
#write to csv
write.csv(dat.trimmed2, file = "Final_CVOE_Trimmed 8_16.csv", row.names = FALSE)
#write to csv
write.csv(dat.trimmed2, file = "Final_CVOE_Trimmed 9_22.csv", row.names = FALSE)
##Load data
combined = read.csv("Final_CVOE_Trimmed 9_22.csv")
rt = subset(combined,
combined$score2 == 1)
####check descriptives####
##mean rts by group
tapply(combined$RT,
combined$block_type, mean)
##mean percent error by block type
tapply((1 - combined$score2) * 100,
combined$block_type, mean)
##Load data
combined = read.csv("Final_CVOE_Trimmed 9_22.csv")
rt = subset(combined,
combined$score2 == 1)
####check descriptives####
##mean rts by group
tapply(combined$RT,
combined$block_type, mean)
##mean percent error by block type
tapply((1 - combined$score2) * 100,
combined$block_type, mean)
##differences within switch groups
##make a switch group subset
yes.switch = subset(combined,
combined$Switch == "Y")
no.switch = subset(combined,
combined$Switch == "N")
yes.switch.rt = subset(rt,
rt$Switch == "Y")
no.switch.rt = subset(rt,
rt$Switch == "N")
tapply(yes.switch$RT,
yes.switch$block_type, mean)
tapply(no.switch$RT,
no.switch$block_type, mean)
tapply(yes.switch$score2 * 100,
yes.switch$block_type, mean)
tapply(no.switch$score2 * 100,
no.switch$block_type, mean)
##congruency
tapply(combined$RT,
list(combined$block_type, combined$Congruent), mean)
tapply(combined$score,
list(combined$block_type, combined$Congruent), mean)
####check by subject####
##overall
m1 = tapply(combined$score2,
list(combined$block_type, combined$Subject), mean)
pure_cv_m = list(m1[2, ])
pure_oe_m = list(m1[3, ])
alt_run_m = list(m1[1, ])
shuff_m = list(m1[4, ])
##Switch
m2 = tapply(yes.switch$score2,
list(yes.switch$block_type, yes.switch$Subject), mean)
switch_alt_run_m = list(m2[1, ])
switch_shuff_m = list(m2[4, ])
##non-switch
m3 = tapply(no.switch$score2,
list(no.switch$block_type, no.switch$Subject), mean)
no_switch_alt_run_m = list(m3[1, ])
no_switch_shuff_m = list(m3[4, ])
#so, lets try to make a table of subject numbers then grab the index.
library(data.table)
d = table(combined$Subject)
d = as.data.frame(d)
d = setDT(d, keep.rownames = TRUE)[]
#subID = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36)
subID = d$Var1 #This does the same thing as the line above it
#make the thing!
output = data.frame(subID, pure_cv_m, pure_oe_m, alt_run_m,
shuff_m, switch_alt_run_m, switch_shuff_m,
no_switch_alt_run_m,
no_switch_shuff_m)
#name the columns!
colnames(output)[2:9] = c("pure_cv_m", "pure_oe_m", "altrun_m",
"shuff_m", "switch_altrun_m",  "switch_shuff_m",
"no_switch_altrun_m",
"no_switch_shuff_m")
write.csv(output, file = "CVOE_Means_9_24.csv", row.names = FALSE)
####set up output####
##mean errors
mean_cv_errors = 1 - output$pure_cv_m
mean_oe_errors = 1 - output$pure_oe_m
mean_alt_errors = 1 - output$altrun_m
mean_rand_errors = 1 - output$shuff_m
alt_switch_errors = 1 - output$switch_altrun_m
alt_non_switch_errors = 1 - output$no_switch_altrun_m
rand_switch_errors = 1 - output$switch_shuff_m
rand_non_switch_errors = 1 - output$no_switch_shuff_m
pure_block_errors = (mean_cv_errors + mean_oe_errors) / 2
##global switch cost
global_cost_alt = alt_non_switch_errors - pure_block_errors
global_cost_rand = rand_non_switch_errors - pure_block_errors
##local switch cost
local_switch_cost_alt = alt_switch_errors - alt_non_switch_errors
local_switch_cost_rand = rand_switch_errors - rand_non_switch_errors
##put it all together
output_errors = data.frame(subID, mean_cv_errors, mean_oe_errors, pure_block_errors,
alt_switch_errors, alt_non_switch_errors, rand_switch_errors, rand_non_switch_errors,
global_cost_alt, global_cost_rand,
local_switch_cost_alt, local_switch_cost_rand)
write.csv(output_errors, file = "Output Mean Errors 9_24.csv", row.names = FALSE)
####RTs####
##read in trimmed data
trimmed = read.csv("Final_CVOE_Trimmed 9_22.csv")
summary(trimmed)
rt = subset(trimmed, #get only the correct responses for RTs
trimmed$score2 == 1)
####set up data####
##overall
rt1 = tapply(rt$RT,
list(rt$block_type, rt$Subject), mean)
pure_cv_rt = list(rt1[2, ])
pure_oe_rt = list(rt1[3, ])
alt_run_rt = list(rt1[1, ])
shuff_rt = list(rt1[4, ])
##switch
yes.switch.rt = subset(rt,
rt$Switch == "Y")
no.switch.rt = subset(rt,
rt$Switch == "N")
rt2 = tapply(yes.switch.rt$RT,
list(yes.switch.rt$block_type, yes.switch.rt$Subject), mean)
switch_alt_run_rt = list(rt2[1, ])
switch_shuff_rt = list(rt2[4, ])
##non-switch
rt3 = tapply(no.switch.rt$RT,
list(no.switch.rt$block_type, no.switch.rt$Subject), mean)
no_switch_alt_run_rt = list(rt3[1, ])
no_switch_shuff_rt = list(rt3[4, ])
table(dat)
library(data.table)
d = table(trimmed$Subject)
d = as.data.frame(d)
d = setDT(d, keep.rownames = TRUE)[]
subID = d$Var1
output2 = data.frame(subID, pure_cv_rt, pure_oe_rt, alt_run_rt,
shuff_rt, switch_alt_run_rt,
switch_shuff_rt, no_switch_alt_run_rt,
no_switch_shuff_rt)
colnames(output2)[2:9] = c("pure_cv_rt", "pure_oe_rt", "altrun_rt",
"shuff_rt", "switch_altrun_rt",
"switch_shuff_rt", "no_switch_altrun_rt",
"no_switch_shuff_rt")
##get cv, oe, alt, and shuff
mean_cv_rt = output2$pure_cv_rt
mean_oe_rt = output2$pure_oe_rt
mean_alt_rt = output2$altrun_rt
mean_shuff_rt = output2$shuff_rt
##switch and non switch
##altrun
switch_altrun_rt = output2$switch_altrun_rt
non_altrun_rt = output2$no_switch_altrun_rt
##shuff
switch_rand_rt = output2$switch_shuff_rt
non_rand_rt = output2$no_switch_shuff_rt
##get pure, local, and global
pure_RT= (output2$pure_cv_rt + output2$pure_oe_rt) / 2
##global switch cost
global_cost_alt_RT = output2$no_switch_altrun_rt - pure_RT
global_cost_rand_RT = output2$no_switch_shuff_rt - pure_RT
##local switch cost
local_switch_cost_alt_RT = output2$switch_altrun_rt - output2$no_switch_altrun_rt
local_switch_cost_rand_RT = output2$switch_shuff_rt - output2$no_switch_shuff_rt
##put everything together
output_RT = data.frame(subID, mean_cv_rt, mean_oe_rt, pure_RT,
switch_altrun_rt, non_altrun_rt,
switch_rand_rt, non_rand_rt,
global_cost_alt_RT, global_cost_rand_RT,
local_switch_cost_alt_RT, local_switch_cost_rand_RT)
write.csv(output_RT, file = "Output RTs 9_22.csv", row.names = FALSE)
